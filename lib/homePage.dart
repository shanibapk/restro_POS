import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:restro_pos/api.dart';
import 'package:restro_pos/api_screen.dart';
import 'package:intl/intl.dart';

class HomePage extends StatefulWidget {
  final salesModel? orderToEdit;
  final salesModel? saleToEdit;
  final salesModel? tableToEdit;
  final String? type;
  const HomePage(
      {super.key,
      this.orderToEdit,
      this.saleToEdit,
      this.tableToEdit,
      this.type});

  @override
  State<HomePage> createState() => _HomePageState();
}

List<Autogenerated> categories = [];
List<products> prod = [];
List<Detail> selectedProducts = [];
String searchQuery = '';
salesModel model = salesModel();
salesModel? toEditOrder;
salesModel? toEditSale;
salesModel? toEditTable;

class _HomePageState extends State<HomePage> {
  getCustomers? selectedCustomer;
  bool showProductWidget = true;
  List<GlobalKey<_HomePageState>> dismissKeys = [];
  List<servicesTable> selectedTables = [];
  int selectedcategoryIndex = 0;
  Future<void> searchProducts(String query) async {
    try {
      List<products> searchResults = await fetchProductDetails(query);
      setState(() {
        prod = searchResults;
      });
    } catch (e) {
      print('Error searching products: $e');
    }
  }

  @override
  void initState() {
    super.initState();
    toEditOrder = widget.orderToEdit;
    toEditSale = widget.saleToEdit;
    toEditTable = widget.tableToEdit;
    // services = [];

    if (toEditOrder != null) {
      setState(() {
        selectedProducts = toEditOrder!.detail ?? [];
        _buildNewContainers();
        netamount = toEditOrder!.totalBillAmount!;
        customer = toEditOrder!.customerId!;
        custName.text = toEditOrder!.contactna!;
        custNum.text = toEditOrder!.contactnumber!;

        if (toEditOrder!.typeofservice != null) {
          selectedTableId = toEditOrder!.typeofservice!;
        }
        print('customer=$customer');
        print('typeofservice=$selectedTableId');
      });
    } else if (toEditSale != null) {
      print("SALE EDIT=$toEditSale");
      setState(() {
        selectedProducts = toEditSale!.detail ?? [];
        _buildNewContainers();
        netamount = toEditSale!.totalBillAmount!;
        selectedTableId = toEditSale!.tableid!;
        customer = toEditSale!.customerId!;
        custName.text = toEditSale!.contactna!;
        custNum.text = toEditSale!.contactnumber!;
        if (toEditSale!.typeofservice != null) {
          selectedTableId = toEditSale!.typeofservice!;
        }
        print('customer=$customer');
      });
    } else if (toEditTable != null) {
      print("TABLE EDIT=$toEditTable");
      setState(() {
        selectedProducts = toEditTable!.detail ?? [];
        _buildNewContainers();
        netamount = toEditTable!.totalBillAmount!;
        custName.text = toEditTable!.contactna!;
        custNum.text = toEditTable!.contactnumber!;
        if (toEditTable!.typeofservice != null) {
          selectedTableId = toEditTable!.typeofservice!;
        }
        print('customer=$customer');
      });
    } else {
      resetSelectedProducts();
    }

    today = DateTime.now();
    fetchCustomers().then((customerList) {
      setState(() {
        customers = customerList;
      });
    });
    getcategories();
    fetchAndSetServices();
    fetchData();
  }

  Future<List<getCustomers>> futureCustomers = fetchCustomers();
  List<getCustomers> customers = [];
  bool isSelected = true;
  double totalAmount = 0.0;
  double netamount = 0;
  void getTotalPrice() {
    double totalPrice = 0;
    for (var selectedProduct in selectedProducts) {
      totalPrice += selectedProduct.lineTotal ?? 0;
    }
    totalAmount = totalPrice;
    calculatePayableAmount(netamount);
  }

  calculatelinetotal() {
    selectedProducts.forEach((salesdetails) {
      salesdetails.lineTotal =
          (salesdetails.quantity ?? 0) * (salesdetails.amount ?? 0);
      var newop = (salesdetails.options ?? "").split(",");
      double price = 0;
      newop.forEach((element) {
        options.forEach((opt) {
          if (opt.name == element) {
            if ((opt.priceApplicable ?? false) == true) {
              price = price + (opt.price ?? 0);
            }
          }
        });
      });
      salesdetails.lineTotal = (salesdetails.lineTotal ?? 0) + price;
    });
    getTotalPrice();
  }

  void calculatePayableAmount(double discount) {
    double discount = double.tryParse(discountController.text) ?? 0;
    if (discount <= 0) {
      netamount = totalAmount;
    } else {
      netamount = totalAmount - discount;
    }
    setState(() {
      netamount = netamount;
    });
  }

  int customer = 0;
  TextEditingController discountController = TextEditingController();
  TextEditingController custName = TextEditingController();
  TextEditingController custNum = TextEditingController();
  TextEditingController custCompany = TextEditingController();
  TextEditingController searchController = TextEditingController();
  TextEditingController customertextEditingController = TextEditingController();
  TextEditingController categorySearchController = TextEditingController();
  TextEditingController textEditingController = TextEditingController();
  void clearText() {
    custName.clear();
    custNum.clear();
    custCompany.clear();
  }

  ValueNotifier<products?> selectedProduct = ValueNotifier<products?>(null);
  ValueNotifier<double> totalAmountNotifier = ValueNotifier<double>(0.0);
  int count = 1;
  int quantity = 1;
  void resetSelectedProducts() {
    setState(() {
      selectedProducts.clear();
      count = 1;
      discountController.clear();
      totalAmount = 0.0;
      netamount = 0;
    });
  }

  int a = 1;
  late DateTime today;

  String getCurrentDate() {
    final formatter = DateFormat('yyyy-MM-dd');
    return formatter.format(today);
  }

  getcategories() async {
    var categorieslist = await fetchCategories();
    setState(() {
      categories = categorieslist;
    });
  }

  Color mycolor = Colors.grey.withOpacity(0.2);
  int selectedIndex = -1;
  void incrementCount(products selectedProduct) {
    setState(() {
      selectedProduct.quantity = (selectedProduct.quantity ?? 0) + 1;
    });
  }

  void decrementCount(products selectedProduct) {
    setState(() {
      if (selectedProduct.quantity != null && selectedProduct.quantity! > 0) {
        selectedProduct.quantity = selectedProduct.quantity! - 1;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 153, 153, 153),
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 248, 248, 249),
        title: Row(
          children: [
            Text("Restro POS",
                style: GoogleFonts.lilitaOne(
                  textStyle: const TextStyle(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 30),
                )),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Container(
                height: 40,
                width: 350,
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(width: 2, color: Colors.grey),
                    color: Colors.white),
                child: Padding(
                  padding: const EdgeInsets.only(left: 10, top: 5),
                  child: TextField(
                    controller: searchController,
                    onChanged: (value) {
                      searchProducts(value);
                    },
                    decoration: const InputDecoration(
                      hintText: 'Search Products',
                      hintStyle:
                          TextStyle(fontSize: 25, fontWeight: FontWeight.bold),
                      border: InputBorder.none,
                    ),
                    style: const TextStyle(
                        fontSize: 25, fontWeight: FontWeight.w500),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          category(),
          Container(
            padding: const EdgeInsets.all(10),
            width: 800,
            height: 535,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.white),
            child: product(),
          ),
          Row(
            children: [
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.white,
                    ),
                    height: 330,
                    width: 380,
                    child: Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Container(
                              color: Colors.white,
                              width: 370,
                              height: 50,
                              child: Row(
                                children: [
                                  const Padding(
                                    padding: EdgeInsets.only(left: 5),
                                  ),
                                  GestureDetector(
                                    onTap: () {},
                                    child: Container(
                                        height: 50,
                                        width: 50,
                                        decoration: BoxDecoration(
                                            color: Colors.grey.withOpacity(0.4),
                                            borderRadius:
                                                BorderRadius.circular(5)),
                                        child: const Icon(
                                          Icons.add,
                                          size: 30,
                                          color: Colors.black,
                                        )),
                                  ),
                                  const SizedBox(
                                    width: 100,
                                  ),
                                  GestureDetector(
                                    onTap: () {
                                      resetSelectedProducts();
                                    },
                                    child: Container(
                                        height: 50,
                                        width: 200,
                                        decoration: BoxDecoration(
                                            color: Colors.grey.withOpacity(0.4),
                                            borderRadius:
                                                BorderRadius.circular(5)),
                                        child: Row(
                                          children: [
                                            const Padding(
                                              padding: EdgeInsets.only(
                                                  left: 5, right: 10),
                                              child: Text(
                                                "RESET ALL",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight: FontWeight.w900,
                                                    fontSize: 20),
                                              ),
                                            ),
                                            const SizedBox(
                                              width: 40,
                                            ),
                                            GestureDetector(
                                              onTap: () {
                                                resetSelectedProducts();
                                              },
                                              child: const Icon(
                                                Icons.restart_alt,
                                                size: 30,
                                                color: Colors.black,
                                              ),
                                            ),
                                          ],
                                        )),
                                  )
                                ],
                              )),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        Container(
                          height: 250,
                          width: 370,
                          color: Colors.white,
                          child: ListView(
                            children: [
                              _buildNewContainers(),
                            ],
                          ),
                        ),
                      ],
                    )),
              ),
              Column(
                children: [
                  Container(
                    margin: const EdgeInsets.only(left: 10),
                    padding: const EdgeInsets.all(7),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.white,
                    ),
                    height: 330,
                    width: 400,
                    child: Column(
                      children: [
                        Container(
                          height: 50,
                          width: 370,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(5),
                            color: Colors.grey.withOpacity(0.4),
                          ),
                          child: const Padding(
                            padding: EdgeInsets.only(left: 2, right: 2),
                            child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text(
                                    'Add',
                                    style: TextStyle(
                                        color: Colors.black,
                                        fontWeight: FontWeight.w900,
                                        fontSize: 27),
                                  ),
                                  Text(
                                    'Coupon Code',
                                    style: TextStyle(
                                        color: Colors.orange,
                                        fontWeight: FontWeight.w900,
                                        fontSize: 27),
                                  )
                                ]),
                          ),
                        ),
                        const SizedBox(
                          height: 5,
                        ),
                        Container(
                          height: 130,
                          width: 370,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(5),
                            color: Colors.grey.withOpacity(0.4),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 5, right: 5, top: 10),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                const Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Amount',
                                      style: TextStyle(
                                          color: Colors.black,
                                          fontWeight: FontWeight.w900,
                                          fontSize: 25),
                                    ),
                                    Text(
                                      'Tax',
                                      style: TextStyle(
                                          color: Colors.black,
                                          fontWeight: FontWeight.w900,
                                          fontSize: 25),
                                    ),
                                    Visibility(
                                      visible: false,
                                      child: Text(
                                        'Discount',
                                        style: TextStyle(
                                            color: Colors.black,
                                            fontWeight: FontWeight.w900,
                                            fontSize: 25),
                                      ),
                                    )
                                  ],
                                ),
                                Column(
                                  children: [
                                    Text(
                                      '\$${netamount.toStringAsFixed(2)}',
                                      style: const TextStyle(
                                          color: Colors.black,
                                          fontWeight: FontWeight.w900,
                                          fontSize: 25),
                                    ),
                                    const Text(
                                      '\$0',
                                      style: TextStyle(
                                          color: Colors.black,
                                          fontWeight: FontWeight.w900,
                                          fontSize: 25),
                                    ),
                                    Visibility(
                                      visible: false,
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(right: 10),
                                        child: Container(
                                          height: 30,
                                          width: 90,
                                          child: TextField(
                                            onChanged: (value) {
                                              final cursorPosition =
                                                  discountController
                                                      .selection.baseOffset;
                                              discountController.value =
                                                  discountController.value
                                                      .copyWith(
                                                text: value,
                                                selection:
                                                    TextSelection.collapsed(
                                                        offset: cursorPosition),
                                              );
                                              calculatePayableAmount(netamount);
                                            },
                                            controller: discountController,
                                            decoration: const InputDecoration(
                                              border: InputBorder.none,
                                              hintText: "\$",
                                              hintStyle:
                                                  TextStyle(fontSize: 25),
                                            ),
                                            style:
                                                const TextStyle(fontSize: 25),
                                            keyboardType: const TextInputType
                                                .numberWithOptions(
                                                decimal: true),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                )
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 5,
                        ),
                        Container(
                          height: 120,
                          width: 370,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(5),
                            color: Colors.grey.withOpacity(0.4),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.only(left: 5, right: 5),
                            child: Column(
                              children: [
                                const SizedBox(
                                  height: 15,
                                ),
                                Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      const Text(
                                        'Payable Amount',
                                        style: TextStyle(
                                            color: Colors.black,
                                            fontWeight: FontWeight.w900,
                                            fontSize: 28),
                                      ),
                                      Text(
                                        '\$${netamount.toStringAsFixed(2)}',
                                        style: const TextStyle(
                                          color: Colors.orange,
                                          fontWeight: FontWeight.w900,
                                          fontSize: 28,
                                        ),
                                      ),
                                    ]),
                                const SizedBox(
                                  height: 0,
                                ),
                                Padding(
                                  padding:
                                      const EdgeInsets.only(left: 3, right: 3),
                                  child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      const SizedBox(
                                        height: 0,
                                      ),
                                      GestureDetector(
                                        onTap: () {
                                          popUpContainer();

                                          // popUpContainer();
                                        },
                                        child: Container(
                                            height: 60,
                                            width: 350,
                                            decoration: BoxDecoration(
                                                color: const Color.fromARGB(
                                                    255, 62, 223, 75),
                                                borderRadius:
                                                    BorderRadius.circular(5)),
                                            child: const Center(
                                              child: Text(
                                                'Proceed',
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight: FontWeight.w900,
                                                    fontSize: 30),
                                              ),
                                            )),
                                      ),
                                    ],
                                  ),
                                )
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              )
            ],
          )
        ],
      ),
    );
  }

  Widget category() {
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: Container(
        height: 220,
        width: MediaQuery.of(context).size.width,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
          color: Colors.white,
        ),
        child: Column(
          children: [
            DropdownButtonFormField2<int>(
              dropdownSearchData: DropdownSearchData(
                searchController: textEditingController,
                searchInnerWidgetHeight: 50,
                searchInnerWidget: Container(
                  height: 50,
                  padding: const EdgeInsets.only(
                    top: 8,
                    bottom: 4,
                    right: 8,
                    left: 8,
                  ),
                  child: TextFormField(
                    expands: true,
                    maxLines: null,
                    controller: textEditingController,
                    decoration: InputDecoration(
                      isDense: true,
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 10,
                        vertical: 8,
                      ),
                      hintText: 'Search for a category...',
                      hintStyle: const TextStyle(fontSize: 23),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    style: const TextStyle(
                        fontSize: 23, fontWeight: FontWeight.w600),
                  ),
                ),
                searchMatchFn: (item, searchValue) {
                  return (item.child as Text)
                      .data
                      .toString()
                      .toUpperCase()
                      .contains(searchValue.toUpperCase());
                },
              ),
              onMenuStateChange: (isOpen) {
                if (!isOpen) {
                  textEditingController.clear();
                }
              },
              decoration: InputDecoration(
                isDense: true,
                contentPadding: const EdgeInsets.only(top: 10, bottom: 10),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(5),
                ),
              ),
              isExpanded: true,
              hint: const Text(
                'Select a Category',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.w900,
                ),
              ),
              items: categories
                  .map((category) => DropdownMenuItem<int>(
                        value: category.id!,
                        child: Text(
                          category.categoryName ?? 'Category',
                          style: const TextStyle(
                            color: Colors.black,
                            fontWeight: FontWeight.w900,
                            fontSize: 20,
                          ),
                        ),
                      ))
                  .toList(),
              onChanged: (value) async {
                int index =
                    categories.indexWhere((category) => category.id == value);
                setState(() {
                  selectedcategoryIndex = index;
                });
                int categoryId = categories[index].id ?? 0;
                var prd = await fetchProducts(categoryId);
                setState(() {
                  prod = prd;
                });
              },
              buttonStyleData: const ButtonStyleData(
                height: 40,
                padding: EdgeInsets.only(left: 5, right: 5),
              ),
              iconStyleData: const IconStyleData(
                icon: Icon(
                  Icons.arrow_drop_down,
                  color: Colors.black45,
                ),
                iconSize: 30,
              ),
              dropdownStyleData: DropdownStyleData(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(15),
                ),
              ),
            ),
            Expanded(
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                shrinkWrap: true,
                itemCount: categories.length,
                itemBuilder: (context, index) {
                  bool isSelected = index == selectedcategoryIndex;
                  return Padding(
                    padding: const EdgeInsets.all(10),
                    child: GestureDetector(
                      onTap: () async {
                        setState(() {
                          selectedcategoryIndex = index;
                        });
                        int categoryId = categories[index].id ?? 0;
                        var prd = (await fetchProducts(categoryId));
                        setState(() {
                          prod = prd;
                        });
                      },
                      child: Container(
                        padding: const EdgeInsets.only(left: 10),
                        width: 140,
                        height: 140,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          border: Border.all(
                            width: 2,
                            color: isSelected ? Colors.grey : Colors.grey,
                          ),
                          color: isSelected
                              ? Colors.grey.withOpacity(0.2)
                              : Colors.white,
                        ),
                        child: Column(
                          children: [
                            const SizedBox(
                              height: 25,
                            ),
                            const Icon(
                              Icons.local_dining,
                              size: 23,
                              color: Color.fromARGB(255, 96, 96, 96),
                            ),
                            const SizedBox(
                              height: 5,
                            ),
                            Text(
                              categories[index].categoryName ?? "Category",
                              style: const TextStyle(
                                color: Colors.grey,
                                fontWeight: FontWeight.w900,
                                fontSize: 20,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget product() {
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3, crossAxisSpacing: 10, mainAxisSpacing: 10),
      itemCount: prod.length,
      itemBuilder: (context, index) {
        products product = prod[index];
        return GestureDetector(
          onTap: () {
            setState(() {
              bool alreadySelected = false;
              for (var selectedProduct in selectedProducts) {
                if (selectedProduct.productId == product.id) {
                  alreadySelected = true;
                  selectedProduct.quantity = selectedProduct.quantity! + 1;
                  calculatelinetotal();
                  break;
                }
              }
              if (!alreadySelected) {
                Detail detail = Detail();
                detail.quantity = 1;
                detail.productName = product.name;
                detail.costPrice = product.costPrice;
                detail.productId = product.id;
                detail.amount = product.price;
                detail.uom = product.uom;
                detail.id = 0;
                detail.saleId = 0;
                selectedProducts.add(detail);
                calculatelinetotal();
              }
            });
          },
          child: Container(
            margin: const EdgeInsets.all(17),
            height: 190,
            width: 110,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(7),
              image: const DecorationImage(
                fit: BoxFit.fill,
                image: AssetImage('images/frtsalad.jpg'),
              ),
              boxShadow: const [],
            ),
            child: Padding(
              padding: const EdgeInsets.all(20.0),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(7),
                  color: Colors.white,
                ),
                child: Column(
                  children: [
                    const SizedBox(
                      height: 10,
                    ),
                    Text(
                      product.name ?? '',
                      style: const TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.w900,
                          fontSize: 22),
                    ),
                    Text(
                      "\$${product.price?.toStringAsFixed(2) ?? '0.00'}",
                      style: const TextStyle(
                          fontWeight: FontWeight.w900,
                          fontSize: 22,
                          color: Colors.black),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Detail? selectedsalesdetail;
  Widget _buildNewContainers() {
    print(selectedProducts.length);
    List<Widget> containers = [];
    for (int index = 0; index < selectedProducts.length; index++) {
      var dismissKey = GlobalKey<_HomePageState>();
      dismissKeys.add(dismissKey);
      containers.add(
        Dismissible(
          key: dismissKey,
          direction: DismissDirection.horizontal,
          onDismissed: (direction) {
            setState(() {
              netamount -= selectedProducts[index].lineTotal ?? 0.0;
              selectedProducts.removeAt(index);
              //selectedProducts.remove(selectedProducts[index]);
            });
          },
          background: Padding(
            padding: const EdgeInsets.only(top: 10),
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(7),
                color: Colors.red,
              ),
              child: const Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Icon(Icons.delete, color: Colors.white),
                  SizedBox(width: 10),
                ],
              ),
            ),
          ),
          child: Padding(
            padding: const EdgeInsets.all(5),
            child: GestureDetector(
              onTap: () {
                selectedsalesdetail = selectedProducts[index];
                var selectedoprtonlist =
                    (selectedsalesdetail!.options ?? "").split(",");
                var direct = "";
                var enterd = "";
                selectedoprtonlist.forEach((element) {
                  if (options.any((op) => op.name == element)) {
                    if (direct != "") {
                      direct = direct + ",";
                    }
                    direct = direct + element ?? "";
                  } else {
                    if (enterd != "") {
                      enterd = enterd + ",";
                    }
                    enterd = enterd + element ?? "";
                  }
                });

                enteredProduct = direct;
                userOptionController.clear();
                userOptionController.text = enterd;
                productOption1(setState);
              },
              child: Container(
                width: 500,
                height: 80,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(7),
                  color: const Color.fromARGB(255, 200, 200, 200),
                ),
                child: Stack(
                  children: [
                    Positioned(
                      top: 10,
                      left: 5,
                      child: Row(
                        children: [
                          const SizedBox(
                            width: 2,
                          ),
                          Text(
                            selectedProducts[index]
                                    .productName
                                    ?.split(' ')
                                    .first ??
                                '',
                            style: const TextStyle(
                              color: Colors.black,
                              fontSize: 25,
                              fontWeight: FontWeight.w900,
                            ),
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          Text(
                            " \$${selectedProducts[index].lineTotal?.toStringAsFixed(2) ?? '0.00'}",
                            style: const TextStyle(
                              color: Colors.black,
                              fontSize: 25,
                              fontWeight: FontWeight.w900,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Positioned(
                      right: 10,
                      top: 25,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          GestureDetector(
                            onTap: () {
                              if (selectedProducts[index].quantity! > 1) {
                                setState(() {
                                  selectedProducts[index].quantity =
                                      selectedProducts[index].quantity! - 1;
                                  calculatelinetotal();
                                });
                              }
                            },
                            child: Container(
                              height: 23,
                              width: 23,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(3),
                                color: Colors.black,
                                border:
                                    Border.all(color: Colors.grey, width: 0.7),
                              ),
                              child: const Icon(
                                Icons.remove,
                                size: 20,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          const SizedBox(width: 3),
                          Text(
                            selectedProducts[index].quantity.toString(),
                            style: const TextStyle(
                              color: Colors.black,
                              fontWeight: FontWeight.w900,
                              fontSize: 25,
                            ),
                          ),
                          const SizedBox(width: 3),
                          GestureDetector(
                            onTap: () {
                              setState(() {
                                selectedProducts[index].quantity =
                                    selectedProducts[index].quantity! + 1;
                                calculatelinetotal();
                              });
                            },
                            child: Container(
                              height: 23,
                              width: 23,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(3),
                                color: Colors.black,
                                border:
                                    Border.all(color: Colors.grey, width: 0.7),
                              ),
                              child: const Icon(
                                Icons.add,
                                size: 20,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    Positioned(
                      top: 46,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Padding(
                            padding: const EdgeInsets.only(left: 6),
                            child: Text(
                              "Unit Price: \$${selectedProducts[index].amount?.toStringAsFixed(2) ?? '0.00'}",
                              style: const TextStyle(
                                color: Colors.black,
                                fontSize: 23,
                                fontWeight: FontWeight.w900,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      );
    }
    return SingleChildScrollView(
      child: Column(
        children: containers,
      ),
    );
  }

  TextEditingController userOptionController = TextEditingController();
  late List<productOption> options = [];
  Future<void> fetchData() async {
    List<productOption> fetchedOptions = await fetchOptions();
    setState(() {
      options = fetchedOptions;
    });
  }

  late String userOptionText = '';
  late String selectedOption = '';
  late String enteredProduct = '';
  void setOptioColor() {
    var selectedoprtonlist = enteredProduct.split(",");
    List<int> notselectedoptions = [];
    options.forEach((element) {
      notselectedoptions.add(element.id ?? 0);
    });
    selectedoprtonlist.forEach((element) {
      options.forEach((opt) {
        if (element == opt.name) {
          opt.selected = true;
          notselectedoptions.remove(opt.id);
        }
      });
    });
    options.forEach((element) {
      if (notselectedoptions.any((opt) => element.id == opt)) {
        element.selected = false;
      }
    });
  }

  Future<void> productOption1(Function setStateCallback) async {
    setOptioColor();

    await showDialog(
      context: context,
      useSafeArea: true,
      barrierDismissible: true,
      useRootNavigator: false,
      builder: (context) => AlertDialog(
        title: Column(
          children: [
            Container(
              height: 200,
              width: 300,
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 3,
                  crossAxisSpacing: 20,
                  mainAxisSpacing: 20,
                ),
                itemCount: options.length,
                itemBuilder: (context, index) {
                  final isSelected = options[index].selected;
                  List<Widget> children = [
                    Text(
                      options[index].name ?? '',
                      style: const TextStyle(
                        fontWeight: FontWeight.w900,
                        color: Colors.white,
                      ),
                    ),
                  ];
                  if (options[index].priceApplicable == true) {
                    children.add(
                      Text(
                        '(${options[index].price})',
                        style: const TextStyle(
                          fontWeight: FontWeight.w900,
                          color: Colors.amber,
                        ),
                      ),
                    );
                  }
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        var serlectedoption = options[index];
                        var selectedoprtonlist = enteredProduct.split(",");
                        if (selectedoprtonlist.any(
                            (element) => element == serlectedoption.name)) {
                          selectedoprtonlist
                              .remove((serlectedoption.name ?? ""));
                        } else {
                          selectedoprtonlist.add(serlectedoption.name ?? "");
                        }
                        enteredProduct = "";
                        selectedoprtonlist.forEach((element) {
                          if (enteredProduct != "") {
                            enteredProduct = enteredProduct + ",";
                          }
                          enteredProduct = enteredProduct + element;
                        });
                        Navigator.pop(context);
                        productOption1(() {});
                      });
                    },
                    child: Container(
                      height: 100,
                      width: 100,
                      decoration: BoxDecoration(
                        color: isSelected ? Colors.grey : Colors.deepPurple,
                        borderRadius: BorderRadius.circular(7),
                      ),
                      child: Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: children,
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(
              height: 20,
            ),
            Container(
              height: 80,
              width: 300,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                border: Border.all(width: 3, color: Colors.deepPurple),
              ),
              child: Padding(
                padding: const EdgeInsets.only(top: 3, left: 8),
                child: TextField(
                  focusNode: FocusNode(),
                  enableInteractiveSelection: false,
                  readOnly: true,
                  controller: TextEditingController(text: enteredProduct),
                  onChanged: (value) {
                    enteredProduct = value;
                  },
                  maxLines: 5,
                  decoration: const InputDecoration(
                    border: InputBorder.none,
                    hintStyle: TextStyle(
                      color: Colors.grey,
                      fontWeight: FontWeight.bold,
                      fontSize: 24,
                    ),
                  ),
                  style: const TextStyle(fontSize: 24),
                ),
              ),
            ),
            const SizedBox(
              height: 7,
            ),
            Container(
              height: 80,
              width: 300,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                border: Border.all(width: 3, color: Colors.deepPurple),
              ),
              child: Padding(
                padding: const EdgeInsets.only(top: 3, left: 8),
                child: TextField(
                  controller: userOptionController,
                  maxLines: 5,
                  onChanged: (value) {
                    userOptionText = value;
                  },
                  decoration: const InputDecoration(
                    hintText: 'Enter the option',
                    border: InputBorder.none,
                    hintStyle: TextStyle(
                      color: Colors.grey,
                      fontWeight: FontWeight.bold,
                      fontSize: 24,
                    ),
                  ),
                  style: const TextStyle(fontSize: 24),
                ),
              ),
            ),
          ],
        ),
        actions: [
          Container(
            height: 60,
            width: 150,
            decoration: BoxDecoration(
                color: Colors.deepPurple,
                borderRadius: BorderRadius.circular(7)),
            child: Center(
              child: TextButton(
                onPressed: () {
                  enteredProduct =
                      '$enteredProduct,${userOptionController.text}';
                  userOptionController.text = userOptionText;

                  print('option=$enteredProduct');
                  if (selectedsalesdetail != null) {
                    selectedsalesdetail?.options = enteredProduct;
                    calculatelinetotal();
                    Navigator.of(context).pop();
                  }
                },
                child: const Text(
                  'ADD',
                  style: TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.w900,
                      color: Colors.white),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  void OrderFunction(String type) async {
    print('Table Id=$selectedTableId');
    print('cust Id=$customer');

    if (selectedTableId == null || customer < 1) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          content: Container(
            padding: const EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.red),
            child: Row(
              children: [
                const Icon(
                  Icons.error,
                  color: Colors.white,
                  size: 40,
                ),
                const SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    const SizedBox(
                      height: 16,
                    ),
                    Text(
                        'Please select a Table and Customer before placing an Order,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 20),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
    } else {
      model.customerId = customer;
      model.contactna = custName.text;
      model.contactnumber = custNum.text;
      model.paymentMode = null;
      model.tableid = selectedTableId;
      model.trxDate = getCurrentDate();
      model.deliveredBy = 1;
      model.orderby = 1;
      model.typeofservice = selectedTableId;
      calculatePayableAmount(netamount);
      model.totalBillAmount = netamount;
      model.print = isSelected;
      model.detail = selectedProducts;
      model.saleId = 0;
      bool orderSaved = false;
      if (toEditSale != null) {
        if (toEditSale!.saleId! > 0) {
          model.saleId = toEditSale!.saleId;
        }
      }
      if (type == "Sale") {
        if (model.saleId! > 0) {
          updateSale(context, model);
          Navigator.of(context).pop();
        } else {
          orderSaved = await saveSaleOrder(context, model);
          //new one for sale
          resetSelectedProducts();
          resetPage();
        }
        // orderSaved = await saveSaleOrder(context, model);
      } else {
        //modified
        if (toEditOrder != null) {
          if (toEditOrder!.saleId! > 0) {
            model.saleId = toEditOrder!.saleId;
          }
        }
        if (type == "Order") {
          if (model.saleId! > 0) {
            updateOrder(context, model);
            Navigator.of(context).pop();
          } else {
            orderSaved = await saveOrder(context, model);
            //new one for sale not sure working
            resetSelectedProducts();
            resetPage();
          }
        }
      }
      if (orderSaved) {
        Navigator.of(context).pop();
        setState(() {
          resetSelectedProducts();
          resetPage();
        });
      }
    }
  }

  void resetPage() {
    for (var i = 0; i < services.length; i++) {
      services[i].selected = false;
    }
    selectedTableId = null;
    customer = 0;
  }

  Future popUpContainer() {
    return showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) {
          return AlertDialog(
            title: Padding(
              padding: const EdgeInsets.only(left: 10, right: 10),
              child: Column(
                children: [
                  const SizedBox(
                    height: 15,
                  ),
                  Align(
                    alignment: Alignment.topLeft,
                    child: Container(
                        padding: const EdgeInsets.only(left: 25),
                        height: 200,
                        width: 430,
                        child: table(setState)
                        // table(setState, selectedTableId)
                        ),
                  ),
                  DropdownButtonFormField2<getCustomers>(
                    dropdownSearchData: DropdownSearchData(
                      searchController: customertextEditingController,
                      searchInnerWidgetHeight: 60,
                      searchInnerWidget: Container(
                        height: 50,
                        padding: const EdgeInsets.only(
                          top: 8,
                          bottom: 4,
                          right: 8,
                          left: 8,
                        ),
                        child: TextFormField(
                          expands: true,
                          maxLines: null,
                          controller: customertextEditingController,
                          decoration: InputDecoration(
                            isDense: true,
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: 10,
                              vertical: 8,
                            ),
                            hintText: 'Search customer',
                            hintStyle: const TextStyle(fontSize: 21),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          style: const TextStyle(
                              fontSize: 21, fontWeight: FontWeight.w600),
                        ),
                      ),
                      searchMatchFn: (item, searchValue) {
                        return (item.child as Text)
                            .data
                            .toString()
                            .toUpperCase()
                            .contains(searchValue.toUpperCase());
                      },
                    ),
                    onMenuStateChange: (isOpen) {
                      if (!isOpen) {
                        textEditingController.clear();
                      }
                    },
                    decoration: InputDecoration(
                      isDense: true,
                      contentPadding: const EdgeInsets.only(
                        top: 14,
                        bottom: 14,
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(5),
                      ),
                    ),
                    isExpanded: true,
                    hint: const Text(
                      'Select a Customer',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.w900,
                      ),
                    ), //new

                    items: customers
                        .map((customer) => DropdownMenuItem<getCustomers>(
                              value: customer,
                              child: Text(
                                customer.name ?? 'Customer',
                                style: const TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w900,
                                  fontSize: 20,
                                ),
                              ),
                            ))
                        .toList(),
                    // onChanged: (selectedCustomer) {
                    //   if (selectedCustomer != null) {
                    //     customer = selectedCustomer.id!;
                    //   }
                    // },
                    value: customers.isNotEmpty
                        ? customers.firstWhere(
                            (customer) => (customer.id ==
                                    toEditOrder?.customerId ||
                                customer.id == toEditSale?.customerId ||
                                customer.id ==
                                    toEditTable
                                        ?.customerId), //customer.id == toEditOrder?.customerId,customers.first,
                            orElse: () => customers.first,
                          )
                        : null,
                    onChanged: (getCustomers? selectedCustomer) {
                      if (selectedCustomer != null) {
                        setState(() {
                          customer = selectedCustomer.id!;
                        });
                      }
                    },
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Row(
                    children: [
                      Container(
                        height: 60,
                        width: 300,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            border:
                                Border.all(width: 3, color: Colors.deepPurple)),
                        child: Padding(
                          padding: const EdgeInsets.only(top: 1, left: 8),
                          child: TextField(
                            controller: custName,
                            decoration: InputDecoration(
                              hintText: 'Customer Name',
                              border: InputBorder.none,
                              hintStyle: const TextStyle(
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 23),
                            ),
                            style: const TextStyle(fontSize: 27),
                          ),
                        ),
                      ),
                      const SizedBox(
                        width: 20,
                      ),
                      Container(
                        height: 60,
                        width: 310,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            border:
                                Border.all(width: 3, color: Colors.deepPurple)),
                        child: Padding(
                          padding: const EdgeInsets.only(top: 1, left: 8),
                          child: TextField(
                            controller: custNum,
                            decoration: InputDecoration(
                              hintText: 'Customer Number',
                              border: InputBorder.none,
                              hintStyle: const TextStyle(
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 23),
                            ),
                            style: const TextStyle(fontSize: 27),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Container(
                    height: 60,
                    width: 620,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        border: Border.all(
                            width: 3,
                            color: const Color.fromARGB(255, 67, 67, 67))),
                    child: Center(
                      child: Text(
                        'Net Amount:\$${netamount.toStringAsFixed(2)}',
                        style: const TextStyle(
                            fontSize: 26,
                            fontWeight: FontWeight.w900,
                            color: Colors.black),
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Container(
                    height: 60,
                    width: 620,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        border: Border.all(width: 3, color: Colors.deepPurple)),
                    child: Padding(
                      padding: const EdgeInsets.only(top: 1, left: 8),
                      child: TextField(
                        controller: custCompany,
                        decoration: InputDecoration(
                          hintText: 'Company',
                          border: InputBorder.none,
                          hintStyle: const TextStyle(
                              color: Colors.grey,
                              fontWeight: FontWeight.bold,
                              fontSize: 23),
                        ),
                        style: const TextStyle(fontSize: 27),
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 25,
                  ),
                  Row(
                    children: [
                      const Text(
                        '  Print invoice',
                        style: TextStyle(
                            fontSize: 26,
                            fontWeight: FontWeight.w900,
                            color: Colors.black),
                      ),
                      const SizedBox(
                        width: 440,
                      ),
                      Transform.scale(
                        scale: 1.5,
                        child: Checkbox(
                            activeColor: Colors.deepOrange,
                            value: isSelected,
                            onChanged: (value) {
                              setState(() {
                                isSelected = value!;
                              });
                            }),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 35,
                  ),
                  Row(
                    children: [
                      const SizedBox(
                        width: 0,
                      ),
                      GestureDetector(
                        onTap: () {
                          if (widget.type == null || widget.type == 'order') {
                            OrderFunction("Order");
                          } else {
                            print('ORDER button disabled');
                          }
                        },
                        child: Container(
                          width: 280,
                          height: 65,
                          decoration: BoxDecoration(
                            color: widget.type == null || widget.type == 'order'
                                ? Colors.green
                                : Colors.grey,
                            borderRadius: BorderRadius.circular(7),
                          ),
                          child: const Center(
                            child: Text(
                              'ORDER',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 23,
                                fontWeight: FontWeight.w700,
                              ),
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(
                        width: 50,
                      ),
                      GestureDetector(
                        onTap: () {
                          if (widget.type == null || widget.type == 'sale') {
                            OrderFunction("Sale");
                          } else {
                            print('SALE button disabled');
                          }
                        },
                        child: Container(
                            width: 280,
                            height: 60,
                            decoration: BoxDecoration(
                                color:
                                    widget.type == null || widget.type == 'sale'
                                        ? Colors.green
                                        : Colors.grey,
                                borderRadius: BorderRadius.circular(7)),
                            child: const Center(
                              child: Text(
                                'SALE',
                                style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 23,
                                    fontWeight: FontWeight.w700),
                              ),
                            )),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 35,
                  ),
                  Row(
                    children: [
                      const SizedBox(
                        width: 0,
                      ),
                      GestureDetector(
                        onTap: () {
                          clearText();
                        },
                        child: Container(
                            width: 280,
                            height: 60,
                            decoration: BoxDecoration(
                                color: Colors.blue,
                                borderRadius: BorderRadius.circular(7)),
                            child: const Center(
                              child: Text(
                                'CLEAR',
                                style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 23,
                                    fontWeight: FontWeight.w700),
                              ),
                            )),
                      ),
                      const SizedBox(
                        width: 50,
                      ),
                      GestureDetector(
                        onTap: () {
                          Navigator.pop(context);
                        },
                        child: Container(
                            width: 280,
                            height: 60,
                            decoration: BoxDecoration(
                                color: Colors.red,
                                borderRadius: BorderRadius.circular(7)),
                            child: const Center(
                              child: Text(
                                'CANCEL',
                                style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 23,
                                    fontWeight: FontWeight.w700),
                              ),
                            )),
                      ),
                    ],
                  )
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  late List<servicesTable> services = [];
  int? selectedTableId;

  Future<void> fetchAndSetServices() async {
    List<servicesTable> fetchedServices = await fetchServiceTable();
    setState(() {
      services = fetchedServices;
    });
  }

  Widget table(Function setStateCallback) {
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        crossAxisSpacing: 20,
        mainAxisSpacing: 20,
      ),
      itemCount: services.length,
      itemBuilder: (context, index) {
        final isSelected = services[index].selected;
        final isAutoSelected =
            selectedTableId != null && services[index].id == selectedTableId;

        return GestureDetector(
          onTap: () {
            setStateCallback(() {
              if (!isSelected) {
                // If the table is not selected, check for auto selection
                if (isAutoSelected) {
                  // Handle auto selection logic here
                  // For example, you can change the color to indicate auto selection
                  services[index].selected = true;
                } else {
                  // If not auto-selected, update the selected table
                  for (var i = 0; i < services.length; i++) {
                    services[i].selected = false;
                  }
                  services[index].selected = true;
                  selectedTableId = services[index].id;
                }
              } else {
                // If the table is already selected, unselect it
                services[index].selected = false;
                selectedTableId = null;
              }
            });
          },
          child: Container(
            height: 80,
            width: 150,
            decoration: BoxDecoration(
              color: isAutoSelected
                  ? Colors.deepPurple[200]
                  : (isSelected ? Colors.grey : Colors.deepPurple),
              borderRadius: BorderRadius.circular(7),
              border: Border.all(
                width: 2.5,
              ),
            ),
            child: Center(
              child: Text(
                services[index].name ?? '',
                style: const TextStyle(
                  fontWeight: FontWeight.w900,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // Widget table(Function setStateCallback, int? selectedTableId) {
  //   return GridView.builder(
  //     gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
  //       crossAxisCount: 3,
  //       crossAxisSpacing: 20,
  //       mainAxisSpacing: 20,
  //     ),
  //     itemCount: services.length,
  //     itemBuilder: (context, index) {
  //       final isTableSelected = services[index].selected;
  //       final tableId = services[index].id;

  //       // Check if the table is selected based on deliveredBy value
  //       final isSelected =
  //           selectedTableId != null && selectedTableId == tableId;

  //       return GestureDetector(
  //         onTap: () {
  //           setStateCallback(() {
  //             for (var i = 0; i < services.length; i++) {
  //               services[i].selected = false;
  //             }

  //             if (!isTableSelected) {
  //               services[index].selected = true;
  //               selectedTableId = tableId;
  //               final selectedTableName = services[index].name;
  //               print('Selected Table ID: $selectedTableId');
  //               print('Selected Table Name: $selectedTableName');
  //             } else {
  //               // If the table is already selected, unselect it
  //               selectedTableId = null;
  //             }
  //           });
  //         },
  //         child: Container(
  //           height: 80,
  //           width: 150,
  //           decoration: BoxDecoration(
  //             color: isSelected ? Colors.grey : Colors.deepPurple,
  //             borderRadius: BorderRadius.circular(7),
  //             border: Border.all(
  //               width: 2.5,
  //             ),
  //           ),
  //           child: Center(
  //             child: Text(
  //               services[index].name ?? '',
  //               style: const TextStyle(
  //                 fontWeight: FontWeight.w900,
  //                 color: Colors.white,
  //               ),
  //             ),
  //           ),
  //         ),
  //       );
  //     },
  //   );
  // }

  // Widget table(Function setStateCallback) {
  //   return GridView.builder(
  //     gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
  //       crossAxisCount: 3,
  //       crossAxisSpacing: 20,
  //       mainAxisSpacing: 20,
  //     ),
  //     itemCount: services.length,
  //     itemBuilder: (context, index) {
  //       final isSelected = services[index].selected;

  //       return GestureDetector(
  //         onTap: () {
  //           setStateCallback(() {
  //             for (var i = 0; i < services.length; i++) {
  //               services[i].selected = false;
  //             }
  //             if (!isSelected) {
  //               services[index].selected = true;
  //               selectedTableId = services[index].id;
  //               final selectedTableName = services[index].name;
  //               print('Selected Table ID: $selectedTableId');
  //               print('Selected Table Name: $selectedTableName');
  //             } else {
  //               // If the table is already selected, unselect it
  //               selectedTableId = null;
  //             }
  //           });
  //         },
  //         child: Container(
  //           height: 80,
  //           width: 150,
  //           decoration: BoxDecoration(
  //             color: isSelected ? Colors.grey : Colors.deepPurple,
  //             borderRadius: BorderRadius.circular(7),
  //             border: Border.all(
  //               width: 2.5,
  //             ),
  //           ),
  //           child: Center(
  //             child: Text(
  //               services[index].name ?? '',
  //               style: const TextStyle(
  //                 fontWeight: FontWeight.w900,
  //                 color: Colors.white,
  //               ),
  //             ),
  //           ),
  //         ),
  //       );
  //     },
  //   );
  // }
}
