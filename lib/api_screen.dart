// ignore_for_file: non_constant_identifier_names
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'package:restro_pos/api.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ApiManager {
  static String baseUrl = ''; // Default value is an empty string
  static Future<void> loadBaseUrl() async {
    if (baseUrl.isEmpty) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      String? savedBaseUrl = prefs.getString('BaseUrl');
      print('Saved BaseUrl: $savedBaseUrl');
      if (savedBaseUrl != null && savedBaseUrl.isNotEmpty) {
        if (!savedBaseUrl.startsWith('http://') &&
            !savedBaseUrl.startsWith('https://')) {
          savedBaseUrl = 'http://' + savedBaseUrl;
        }
        baseUrl = savedBaseUrl;
      }
    }
  }

  // Function to load the base URL from SharedPreferences or use the default
  // static Future<void> loadBaseUrl() async {
  //   if (baseUrl.isEmpty) {
  //     SharedPreferences prefs = await SharedPreferences.getInstance();
  //     String? savedBaseUrl = prefs.getString('BaseUrl');
  //     print('Saved BaseUrl: $savedBaseUrl');
  //     if (savedBaseUrl != null && savedBaseUrl.isNotEmpty) {
  //       baseUrl = savedBaseUrl;
  //     }
  //   }
  // }
}

Future<bool> makeLoginApiCall(String pin) async {
  WidgetsFlutterBinding.ensureInitialized();
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetUsers'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );
  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<login> posts =
        List<login>.from(l.map((model) => login.fromJson(model)));
    if (posts.where((element) => element.pin == pin).isNotEmpty) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

Future<List<Autogenerated>> fetchCategories() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetCategories'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<Autogenerated> posts = List<Autogenerated>.from(
        l.map((model) => Autogenerated.fromJson(model)));
    return posts;
  } else {
    return List<Autogenerated>.empty();
  }
}

Future<List<products>> fetchProducts(cateid) async {
  await ApiManager.loadBaseUrl();
  var api = '/api/Sales/GetProducts/' + cateid.toString();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + api),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );
  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<products> posts =
        List<products>.from(l.map((model) => products.fromJson(model)));
    return posts;
  } else {
    return List<products>.empty();
  }
}

Future<List<getCustomers>> fetchCustomers() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetCustomers'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );
  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<getCustomers> posts =
        List<getCustomers>.from(l.map((model) => getCustomers.fromJson(model)));
    return posts;
  } else {
    throw Exception('Failed to load customers');
  }
}

Future<List<productOption>> fetchOptions() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetOptions'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );
  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<productOption> posts = List<productOption>.from(
        l.map((model) => productOption.fromJson(model)));
    return posts;
  } else {
    return List<productOption>.empty();
  }
}

Future<List<servicesTable>> fetchServiceTable() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetListOfServices'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );
  if (response.statusCode == 200) {
    Iterable l = json.decode(response.body);
    List<servicesTable> posts = List<servicesTable>.from(
        l.map((model) => servicesTable.fromJson(model)));
    return posts;
  } else {
    return List<servicesTable>.empty();
  }
}

Future<List<products>> fetchProductDetails(String productName) async {
  await ApiManager.loadBaseUrl();
  //tosearchproduct
  final response = await http.get(Uri.parse(
      ApiManager.baseUrl + '/api/Sales/GetProductsFilter/$productName'));

  if (response.statusCode == 200) {
    try {
      final List<dynamic> dataList = json.decode(response.body);
      List<products> productsList =
          dataList.map((data) => products.fromJson(data)).toList();
      return productsList;
    } catch (e) {
      print("Error parsing the response data: $e");
      throw Exception('Failed to load products');
    }
  } else {
    print("API request failed with status code: ${response.statusCode}");
    throw Exception('Failed to load products');
  }
}

// Future<List<orderList>> fetchGetOrders() async {
//   await ApiManager.loadBaseUrl();
//   final response = await http.get(
//     Uri.parse(ApiManager.baseUrl + '/api/Sales/GetOrders'),
//     headers: <String, String>{
//       'Content-Type': 'application/json',
//     },
//   );

//   if (response.statusCode == 200) {
//     List<dynamic> jsonResponse = json.decode(response.body);
//     return jsonResponse.map((data) => orderList.fromJson(data)).toList();
//   } else {
//     throw Exception('Failed to load orders');
//   }
// }
Future<List<getSales>> fetchGetSalesData() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetSales'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    List<dynamic> jsonResponse = json.decode(response.body);
    return jsonResponse.map((data) => getSales.fromJson(data)).toList();
  } else {
    throw Exception('Failed to load orders');
  }
}

Future<List<getOrder>> fetchGetOrders() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetOrders'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    List<dynamic> jsonResponse = json.decode(response.body);
    List<getOrder> salesList =
        jsonResponse.map((data) => getOrder.fromJson(data)).toList();
    return salesList;
  } else {
    throw Exception('Failed to load sales data');
  }
}

Future<List<getTable>> fetchTables() async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/GetTables'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    List<dynamic> jsonList = json.decode(response.body);
    List<getTable> tables =
        jsonList.map((json) => getTable.fromJson(json)).toList();
    return tables;
  } else {
    throw Exception('Failed to load tables');
  }
}

// Future<void> callRePrintApi() async {
//   await ApiManager.loadBaseUrl();
//   var headers = {'Content-Type': 'application/json'};
//   var request = http.Request(
//       'POST', Uri.parse(ApiManager.baseUrl + '/api/Sales/RePrint'));
//   request.body = json.encode({"id": 1, "type": "order"});
//   request.headers.addAll(headers);

//   try {
//     http.StreamedResponse response = await request.send();

//     if (response.statusCode == 200) {
//       print(await response.stream.bytesToString());
//     } else {
//       print('Error: ${response.reasonPhrase}');
//     }
//   } catch (e) {
//     print('Error: $e');
//   }
// }

Future<bool> saveSaleOrder(BuildContext context, salesModel model) async {
  await ApiManager.loadBaseUrl();
  var headers = {'Content-Type': 'application/json'};
  var request =
      http.Request('POST', Uri.parse(ApiManager.baseUrl + '/api/Sales/Order'));
  request.body = jsonEncode(model.toJson());
  print("Print:${request.body}");
  request.headers.addAll(headers);

  try {
    http.StreamedResponse response = await request.send();
    if (response.statusCode == 200) {
      print(await response.stream.bytesToString());
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          duration: Duration(seconds: 2),
          content: Container(
            padding: EdgeInsets.all(10),
            height: 70,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                color: Color.fromARGB(255, 81, 146, 83)),
            child: Row(
              children: [
                Icon(
                  Icons.check_circle,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Order Successfull,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );

      return true;
    } else {
      print('Error: ${response.reasonPhrase}');
      print('Response Body: ${await response.stream.bytesToString()}');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.red),
            child: Row(
              children: [
                Icon(
                  Icons.error,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('ERROR on requisting order to server,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
      return false; // Indicates failure
    }
  } catch (error) {
    print('Error making POST request: $error');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('Error occurred,please try again,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
    return false; // Indicates failure
  }
}

Future<bool> updateOrder(BuildContext context, salesModel model) async {
  await ApiManager.loadBaseUrl();
  var headers = {'Content-Type': 'application/json'};
  var response = await http.post(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/UpdateOrder'),
    headers: headers,
    body: jsonEncode(model.toJson()),
  );
  if (response.statusCode == 200) {
    print('Order Updated Successfully');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        duration: Duration(seconds: 2),
        content: Container(
          padding: EdgeInsets.all(10),
          height: 70,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10),
              color: Color.fromARGB(255, 81, 146, 83)),
          child: Row(
            children: [
              Icon(
                Icons.check_circle,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('Order Updated Successfully,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
    return true;
  } else {
    print('Error: ${response.reasonPhrase}');
    print('Response Body: ${response.body}');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('Error updating order,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
    return false;
  }
}

Future<bool> updateSale(BuildContext context, salesModel model) async {
  await ApiManager.loadBaseUrl();
  var headers = {'Content-Type': 'application/json'};
  var response = await http.post(
    Uri.parse(ApiManager.baseUrl + '/api/Sales/UpdateSale'),
    headers: headers,
    body: jsonEncode(model.toJson()),
  );
  if (response.statusCode == 200) {
    print('sale Updated Successfully');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        duration: Duration(seconds: 2),
        content: Container(
          padding: EdgeInsets.all(10),
          height: 70,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10),
              color: Color.fromARGB(255, 81, 146, 83)),
          child: Row(
            children: [
              Icon(
                Icons.check_circle,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('sale Updated Successfully,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
    return true;
  } else {
    print('Error: ${response.reasonPhrase}');
    print('Response Body: ${response.body}');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('Error updating sale,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
    return false;
  }
}

Future<bool> saveOrder(BuildContext context, salesModel model) async {
  await ApiManager.loadBaseUrl();
  var headers = {'Content-Type': 'application/json'};
  var request = http.Request(
      'POST', Uri.parse(ApiManager.baseUrl + '/api/Sales/SaleOrder'));
  request.body = jsonEncode(model.toJson());
  print("Print:${request.body}");
  request.headers.addAll(headers);
  try {
    http.StreamedResponse response = await request.send();
    if (response.statusCode == 200) {
      print(await response.stream.bytesToString());
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          duration: Duration(seconds: 2),
          content: Container(
            padding: EdgeInsets.all(10),
            height: 70,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                color: Color.fromARGB(255, 81, 146, 83)),
            child: Row(
              children: [
                Icon(
                  Icons.check_circle,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Order Successfull,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );

      return true;
    } else {
      print('Error: ${response.reasonPhrase}');
      print('Response Body: ${await response.stream.bytesToString()}');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.red),
            child: Row(
              children: [
                Icon(
                  Icons.error,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('ERROR on requisting order to server,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
      return false; // Indicates failure
    }
  } catch (error) {
    print('Error making POST request: $error');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 10,
                  ),
                  Text('Error occurred,please try again,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );

    return false; // Indicates failure
  }
}

Future<void> printOrder(BuildContext context, int? orderId, String type) async {
  if (orderId == null) {
    print('Error: Order ID is null');
    return;
  }
  var headers = {
    'Content-Type': 'application/json',
  };

  var request = http.Request(
    'POST',
    Uri.parse(ApiManager.baseUrl + '/api/Sales/RePrint'),
  );

  request.body = json.encode({"id": orderId, "type": type});
  request.headers.addAll(headers);

  try {
    http.StreamedResponse response = await request.send();

    if (response.statusCode == 200) {
      print(await response.stream.bytesToString());
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          duration: Duration(seconds: 2),
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                color: Color.fromARGB(255, 81, 146, 83)),
            child: Row(
              children: [
                Icon(
                  Icons.check_circle,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Print requist sent Successfully,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
    } else {
      // Display an error message to the user
      print('Error56: ${response.reasonPhrase}');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.red),
            child: Row(
              children: [
                Icon(
                  Icons.error,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Error sending print requist,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
    }
  } catch (e) {
    // Display a generic error message to the user
    print('Error34: $e');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 16,
                  ),
                  Text('Error sending print requist,please try again,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
  }
}

Future<void> printSales(BuildContext context, int? saleId, String type) async {
  if (saleId == null) {
    print('Error: Order ID is null');
    return;
  }

  var headers = {
    'Content-Type': 'application/json',
  };
  var request = http.Request(
    'POST',
    Uri.parse(ApiManager.baseUrl + '/api/Sales/RePrint'),
  );

  request.body = json.encode({"id": saleId, "type": type});
  request.headers.addAll(headers);

  try {
    http.StreamedResponse response = await request.send();

    if (response.statusCode == 200) {
      // Display a success message to the user
      print(await response.stream.bytesToString());
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          duration: Duration(seconds: 2),
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                color: Color.fromARGB(255, 81, 146, 83)),
            child: Row(
              children: [
                Icon(
                  Icons.check_circle,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Print requist sent Successfully,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
    } else {
      // Display an error message to the user
      print('Error: ${response.reasonPhrase}');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          backgroundColor: Colors.transparent,
          content: Container(
            padding: EdgeInsets.all(10),
            height: 80,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10), color: Colors.red),
            child: Row(
              children: [
                Icon(
                  Icons.error,
                  color: Colors.white,
                  size: 40,
                ),
                SizedBox(
                  width: 20,
                ),
                Expanded(
                    child: Column(
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text('Error sending print requist,',
                        style: GoogleFonts.poppins(
                          textStyle: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 26),
                        ))
                  ],
                ))
              ],
            ),
          ),
        ),
      );
    }
  } catch (e) {
    // Display a generic error message to the user
    print('Error: $e');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Colors.transparent,
        content: Container(
          padding: EdgeInsets.all(10),
          height: 80,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10), color: Colors.red),
          child: Row(
            children: [
              Icon(
                Icons.error,
                color: Colors.white,
                size: 40,
              ),
              SizedBox(
                width: 20,
              ),
              Expanded(
                  child: Column(
                children: [
                  SizedBox(
                    height: 16,
                  ),
                  Text('Error sending print requist,please try again,',
                      style: GoogleFonts.poppins(
                        textStyle: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 26),
                      ))
                ],
              ))
            ],
          ),
        ),
      ),
    );
  }
}

// Future<salesModel> editOrder(int? orderId) async {
//   await ApiManager.loadBaseUrl();
//   final response = await http
//       .get(Uri.parse(ApiManager.baseUrl + '/api/Sales/GetOrderById/$orderId'));

//   if (response.statusCode == 200) {
//     var jsonResponse = json.decode(response.body);
//     print("edit=$jsonResponse");
//     return salesModel.fromJson(jsonResponse);
//   } else {
//     throw Exception('Failed to load order data');
//   }
// }
Future<salesModel?> editOrder(int? orderId) async {
  await ApiManager.loadBaseUrl();
  final response = await http
      .get(Uri.parse(ApiManager.baseUrl + '/api/Sales/GetOrderById/$orderId'));

  if (response.statusCode == 200) {
    var jsonResponse = json.decode(response.body);
    print("edit=$jsonResponse");
    var r = salesModel.fromJson(jsonResponse);
    print(r.saleId);
    print('orderEdit=${r.saleId}');
    return r;
  } else {
    throw Exception('Failed to load order data');
  }
}

Future<salesModel?> editSale(int? saleId) async {
  await ApiManager.loadBaseUrl();
  final response = await http
      .get(Uri.parse(ApiManager.baseUrl + '/api/Sales/GetSaleById/$saleId'));
  if (response.statusCode == 200) {
    var jsonResponse = json.decode(response.body);
    print("edit=$jsonResponse");
    var r = salesModel.fromJson(jsonResponse);
    print('saleEdit=${r.saleId}');
    return r;
  } else {
    throw Exception('Failed to load sale data');
  }
}

Future<salesModel?> editTable(int? tableId) async {
  await ApiManager.loadBaseUrl();
  final response = await http.get(Uri.parse(
      ApiManager.baseUrl + '/api/Sales/TypeOfServiceOrders/$tableId'));
  if (response.statusCode == 200) {
    var jsonResponse = json.decode(response.body);
    print("Table Edit=$jsonResponse");
    var r = salesModel.fromJson(jsonResponse);
    print('saleEdit=${r.saleId}');
    return r;
  } else {
    throw Exception('Failed to load table data');
  }
}
